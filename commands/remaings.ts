import { EmbedBuilder, Message } from "discord.js";
import Command from "../src/structures/command";
import { AlisterHelper } from "../src/core";
import { SharedEntity } from "../src/@foxlib/shared-entity";
import { SchedulerModel } from "../src/database/scheduler_schema";
import { formatDuration } from "../src/util/formatDuration";
import { TokenType } from "../src/engine/command-parser/token-type";
import { BooleanEntity, IntEntity } from "../src/engine/command-parser/manager";
import { getMoscowTime } from "../src/util/getMoscowTime";
import { formatDateString } from "../src/util/formatDateString";

export default class UseCommand extends Command {
  constructor(client: AlisterHelper) {
    super(client, {
      name: "remaings",
      description: "–ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
      memberPermissions: [],
      clientPermissions: [],
      arguments: [],
      flags: []
    });
  }

  public async run(message: Message<boolean>) {
    const task = await SharedEntity.findOneOrCreate(SchedulerModel, {
      search: {
        uid: message.author.id
      },
      createPayload: {
        tasks: []
      }
    })

    const tasks = task.payload.tasks.filter(task => task.type == "Reminder")
    if(tasks.length < 1) {
      const embed = new EmbedBuilder()
        .setTitle(`üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ${message.author.username}`)
        .setColor('#FF6347')
        .setDescription('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º! üòä')
        .setTimestamp();

      message.channel.send({ embeds: [ embed ] })
    } else {
      const embed = new EmbedBuilder()
        .setTitle(`üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ${message.author.username}`)
        .setColor(0x0077b6)

      const moscowTime = getMoscowTime();

      for(const current of tasks) {
        const diff = new Date(current.task_due).getTime() - moscowTime.getTime()
        embed.addFields({
          name: `–ù–∞–∑–≤–∞–Ω–∏–µ: ${current.title}`,
          
          value: [
            `üïí –î–æ–±–∞–≤–ª–µ–Ω–æ: ${formatDateString(current.task_add)}`,
            `‚è∞ –í—ã–ø–æ–ª–Ω–∏—Ç—Å—è: —á–µ—Ä–µ–∑ **${formatDuration(diff, "ms", 3)}**`,
            `üì© –£–≤–µ–¥–æ–º–ª—è—Ç—å –≤ –õ–°: **${current.remaining_self ? "–î–∞" : "–ù–µ—Ç"}**`,
            current.content.length < 1 ? undefined : `\`\`\`${current.content}\`\`\``
          ].filter(Boolean).join("\n"),
          inline: true
        })
      }

      message.channel.send({ embeds: [ embed ] })
    }
  }
}
