import {
  ActivityType,
  AttachmentBuilder,
  EmbedBuilder,
  TextChannel,
  User,
} from "discord.js";
import { AlisterHelper } from "../src/core";
import DiscordEvent from "../src/structures/event";
import { MinecraftAPI } from "../src/util/mc.api";
import DateTime from "../src/util/dataTime";
import Duration from "../src/util/duration";
import { SharedEntity } from "../src/@foxlib/shared-entity";
import { UserModel } from "../src/database/user_schema";
import { SchedulerModel } from "../src/database/scheduler_schema";
import TaskScheduler, { Task } from "../src/util/task";
import { formatDuration } from "../src/util/formatDuration";
import { BaseType, Infer } from "../src/@foxlib/data-types";
import { LongTimeout } from "../src/util/LongTimeout";
import { getMoscowTime } from "../src/util/getMoscowTime";
import { getDeclension } from "../src/util/getDeclension";
import { DocumentChange } from "@firebase/firestore";

type ITask = Infer<typeof SchedulerModel.model>;

export default class UseEvent extends DiscordEvent<"ready"> {
  constructor(client: AlisterHelper) {
    super(client, {
      name: "ready",
      once: true,
    });
  }

  async execute() {
    console.log("Connect!");

    this.client.user?.setPresence({
      status: "dnd",
      activities: [
        {
          name: "Minecraft",
          state: "foxmine.zlr.su",
          type: ActivityType.Playing,
        },
      ],
    });

    // const api = new MinecraftAPI("foxmine.zlr.su");
    // this.update(api);
    this.updateRoles();

    const taskActive: Record<string, boolean> = {};
    const tasks = await SharedEntity.toList(SchedulerModel);
    for (const task of tasks) {
      task.onUpdate(async (data) => {
        const updates = (
          change: DocumentChange<
            Infer<typeof SchedulerModel.model>,
            Infer<typeof SchedulerModel.model>
          >
        ) => {
          const doc = change.doc.data();
          const db_task = SharedEntity.fromJson(SchedulerModel, doc);

          for (const subtask of doc.tasks) {
            if(!(subtask.id in taskActive)) {
              taskActive[subtask.id] = false
            }

            if(taskActive[subtask.id] == true) {
              continue;
            }

            switch (subtask.type) {
              case "Birthday": {
                if(taskActive[subtask.id] == false) {
                  taskActive[subtask.id] = true;
                }

                const current = getMoscowTime();

                const diff = Date.parse(subtask.task_due) - current.getTime();
                new LongTimeout(async () => {
                  const index = db_task.payload.tasks.indexOf(subtask);
                  const new_task = db_task.payload.tasks[index];
                  const new_due = new Date(new_task.task_due);
                  new_due.setFullYear(current.getFullYear() + 1);
                  new_task.task_due = new_due.toISOString();

                  db_task.save();

                  const congratulations = [
                    `üéâ –£—Ö —Ç—ã, {name}, —Ç–µ–±–µ —É–∂–µ {age}?! üéÇ –ù–µ –º–æ–≥—É –ø–æ–≤–µ—Ä–∏—Ç—å! –¢—ã —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –∫—É—á—É —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–æ–≤ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—á–∞—Å—Ç—å–µ–º –∏ —É–ª—ã–±–∫–∞–º–∏!`,
                    `üéà –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, {name}, {age}! üéÅ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –±–æ–ª—å—à–æ–π! –ñ–µ–ª–∞—é —Ç–µ–±–µ –∫—É—á—É —Å—á–∞—Å—Ç—å—è, –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—á—Ç! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è!`,
                    `üéä –í–∞—É, {name}, {age}! üéâ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —è—Ä–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏, –Ω–æ–≤—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ –∏ –±–æ–ª—å—à–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! –ñ–µ–ª–∞—é —Ç–µ–±–µ –º–æ—Ä–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è!`,
                    `üéÇ –û–≥–æ, {name}, {age}! üéà –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç —Å–∞–º—ã–º –ª—É—á—à–∏–º, –ø–æ–ª–Ω—ã–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!`,
                    `üéÅ –ù–∏—á–µ–≥–æ —Å–µ–±–µ, {name}, —Ç–µ–±–µ —É–∂–µ {age}! üéâ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É–¥–∞—á–∏! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω —Å—á–∞—Å—Ç—å–µ–º –∏ –ø–æ–∑–∏—Ç–∏–≤–æ–º!`,
                    `üéâ –í–∞—É, {name}, {age}! üéÇ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ñ–µ–ª–∞—é —Ç–µ–±–µ –º–æ—Ä–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è!`,
                    `üéà –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, {name}, {age}! üéä –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é, —É—Å–ø–µ—Ö–∞–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏! –ñ–µ–ª–∞—é —Ç–µ–±–µ –∫—É—á—É —Å—á–∞—Å—Ç—å—è –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è!`,
                    `üéÅ –í–∞—É, {name}, {age}! üéâ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è, —É–¥–∞—á–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ñ–µ–ª–∞—é, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—ã–ª —è—Ä–∫–∏–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è!`,
                    `üéÇ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, {name}, {age}! üéà –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç —Å–∞–º—ã–º —è—Ä–∫–∏–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è, –ø–æ–ª–Ω—ã–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ —Ä–∞–¥–æ—Å—Ç–∏! –ñ–µ–ª–∞—é —Ç–µ–±–µ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!`,
                    `üéâ –û–≥–æ, {name}, {age}! üéÅ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –ø–æ–ª–æ–Ω —Ä–∞–¥–æ—Å—Ç–∏, –≤–µ—Å–µ–ª—å—è –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! –ñ–µ–ª–∞—é —Ç–µ–±–µ –º–æ—Ä–µ —Å—á–∞—Å—Ç—å—è –∏ —É—Å–ø–µ—Ö–æ–≤!`,
                    `üòÇ –•–∞-—Ö–∞, {name}, —Ç–µ–±–µ —É–∂–µ {age}! üéÇ –ù–µ—É–∂–µ–ª–∏ —Ç—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–ª —Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –≥–æ–¥–∞? –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –∫—É—á—É —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è!`,
                    `üéà –û–≥–æ, {name}, {age}! üéÅ –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π, —á—Ç–æ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—à—å –∑–∞–±—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç! –ñ–µ–ª–∞—é —Ç–µ–±–µ –∫—É—á—É —Å—á–∞—Å—Ç—å—è –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è!`,
                    `üéä –í–∞—É, {name}, {age}! üéâ –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø–µ–Ω—Å–∏–∏! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —É—Å–ø–µ—Ö–∞–º–∏!`,
                    `üéÇ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, {name}, {age}! üéà –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π, —á—Ç–æ –ø–æ—Ä–∞ –ø–∏—Å–∞—Ç—å –º–µ–º—É–∞—Ä—ã! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≤–æ–∑—Ä–∞—Å—Ç –±—É–¥–µ—Ç —Å–∞–º—ã–º –ª—É—á—à–∏–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è!`,
                    `üéÅ –•–∞-—Ö–∞, {name}, —Ç–µ–±–µ —É–∂–µ {age}! üéâ –¢—ã —É–∂–µ —Ç–∞–∫–æ–π –≤–∑—Ä–æ—Å–ª—ã–π, —á—Ç–æ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø–æ–∫—É–ø–∫–µ —Ç—Ä–æ—Å—Ç–∏! –ñ–µ–ª–∞—é —Ç–µ–±–µ –∫—É—á—É —Å—á–∞—Å—Ç—å—è –∏ —É–¥–∞—á–∏!`,
                  ];

                  const discordCongratulations = [
                    `üéâ –í—Å–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è —É {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º –∫—É—á—É —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–æ–≤!`,
                    `üéà –í–Ω–∏–º–∞–Ω–∏–µ, –≤–Ω–∏–º–∞–Ω–∏–µ! –£ {name} —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéÅ –ï–º—É —É–∂–µ {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è!`,
                    `üéä –î—Ä—É–∑—å—è, —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫! –£ {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ —É—Å–ø–µ—Ö–æ–≤!`,
                    `üéÇ –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —É {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéà –ï–º—É —É–∂–µ {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!`,
                    `üéÅ –í–Ω–∏–º–∞–Ω–∏–µ, –¥—Ä—É–∑—å—è! –£ {name} —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ä–∞–¥–æ—Å—Ç–∏!`,
                    `üéâ –î—Ä—É–∑—å—è, —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫! –£ {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ –ï–º—É —É–∂–µ {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –ª—é–±–≤–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤!`,
                    `üéà –í—Å–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è —É {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéä –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–æ–≤ –∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π!`,
                    `üéÅ –í–Ω–∏–º–∞–Ω–∏–µ, –≤–Ω–∏–º–∞–Ω–∏–µ! –£ {name} —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ –ï–º—É —É–∂–µ {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, —É–¥–∞—á–∏ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤!`,
                    `üéÇ –î—Ä—É–∑—å—è, —É –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫! –£ {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéà –ï–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —è—Ä–∫–∏—Ö –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏—Ö—Å—è –º–æ–º–µ–Ω—Ç–æ–≤!`,
                    `üéâ –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —É {name} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéÅ –ï–º—É —É–∂–µ {age}! –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ –∏ –ø–æ–∂–µ–ª–∞–µ–º —Ä–∞–¥–æ—Å—Ç–∏, –≤–µ—Å–µ–ª—å—è –∏ —É—Å–ø–µ—Ö–æ–≤!`,
                  ];

                  const member = this.client.users.resolve(doc.uid);

                  const user = await SharedEntity.findOneOrCreate(UserModel, {
                    search: { uid: doc.uid },
                  });
                  if (member) {
                    const index1 = Math.floor(
                      Math.random() * congratulations.length
                    );
                    const index2 = Math.floor(
                      Math.random() * discordCongratulations.length
                    );

                    const diff =
                      current.getTime() -
                      Date.parse(user.payload.about.birthday);
                    const seconds = 1000;
                    const minutes = seconds * 60;
                    const hours = minutes * 60;
                    const days = hours * 24;
                    const years = days * 365.25;

                    const age = (diff / years) << 0;

                    const content1 = congratulations[index1]
                      .replace(/\{name\}/, user.payload.about.name)
                      .replace(
                        /\{age\}/,
                        `${age} ${getDeclension(age, ["–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç"])}`
                      );

                    const content2 = discordCongratulations[index2]
                      .replace(/\{name\}/, member.toString())
                      .replace(
                        /\{age\}/,
                        `${age} ${getDeclension(age, ["–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç"])}`
                      );

                    const embed = new EmbedBuilder()
                      .setColor("#FFD700")
                      .setTitle(
                        `üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è, ${user.payload.about.name}! üéâ`
                      )
                      .setDescription(content1)
                      .setFooter({
                        text: "–ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ —Å—á–∞—Å—Ç—å–µ–º!",
                      })
                      .setThumbnail(
                        "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/557-birthday-cake-1.svg/640px-557-birthday-cake-1.svg.png"
                      );

                    member.send({ embeds: [embed] });

                    const guild = this.client.guilds.resolve(
                      "1175868237464997928"
                    );

                    const embed1 = new EmbedBuilder()
                      .setColor("#FFD700")
                      .setTitle("üéâ –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è! üéâ")
                      .setDescription(content2)
                      .addFields({ name: "–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", value: content1 })
                      .setFooter({
                        text: `–° –ª—é–±–æ–≤—å—é, –≤–∞—à ${guild!.name}!`,
                        iconURL: guild!.iconURL()!,
                      })
                      .setThumbnail(
                        "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/557-birthday-cake-1.svg/640px-557-birthday-cake-1.svg.png"
                      );

                    const channel = this.client.channels.resolve(
                      "1238803428252319784"
                    );
                    if (channel && channel instanceof TextChannel) {
                      channel.send({ embeds: [embed1] });
                    }
                  }
                }, diff);
                break;
              }

              case "Reminder":
                { 
                  if(taskActive[subtask.id] == false) {
                    taskActive[subtask.id] = true;
                  }

                  const current = getMoscowTime();

                  const diff = Date.parse(subtask.task_due) - current.getTime();

                  new LongTimeout(() => {
                    const index = db_task.payload.tasks.indexOf(subtask);
                    delete db_task.payload.tasks[index];
                    delete taskActive[subtask.id];
                    db_task.payload.tasks = db_task.payload.tasks.filter(Boolean);
                    db_task.save();

                    if (subtask.remaining_self) {
                      const member = this.client.users.resolve(
                        task.payload.uid
                      );

                      if (member == null) {
                        return;
                      }

                      const reminderEmbed = new EmbedBuilder()
                        .setColor("#8a2be2")
                        .setTitle(`üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${subtask.title}`)
                        .setDescription("–ù–µ –∑–∞–±—É–¥—å –æ —Å–≤–æ–µ–º –≤–∞–∂–Ω–æ–º –¥–µ–ª–µ!")
                        .addFields({ name: "–ó–∞–¥–∞—á–∏:", value: `\`\`\`${subtask.content}\`\`\`` })
                        .setTimestamp(Date.now());

                      member.send({ embeds: [reminderEmbed] });
                    } else {
                      const channel = this.client.channels.resolve(
                        subtask.cid
                      ) as TextChannel;

                      const reminderEmbed = new EmbedBuilder()
                        .setColor("#8a2be2")
                        .setTitle(`üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${subtask.title}`)
                        .setDescription("–ù–µ –∑–∞–±—É–¥—å –æ —Å–≤–æ–µ–º –≤–∞–∂–Ω–æ–º –¥–µ–ª–µ!")
                        .addFields({ name: "–ó–∞–¥–∞—á–∏:", value: `\`\`\`${subtask.content}\`\`\`` })
                        .setTimestamp(Date.now());

                      channel.send({ embeds: [reminderEmbed], content: `<@${task.payload.uid}>` });
                    }
                  }, diff);
                }
                break;
            }
          }
        };

        for (const change of data.docChanges()) {
          switch (change.type) {
            case "modified": {
              updates(change);
              break;
            }
          }
        }
      });

      // task.save();
    }

    // this.client.tasks.on("taskDue", <T extends ITask, P extends ITask['tasks'][number]>(task: Task<T, P>) => {
    //   console.log(task);

    //   switch (task.data.type) {
    //     case "Birthday": {
    //       console.log("Happy Birthday");
    //     }
    //   }
    // });
  }

  async updateRoles() {
    const users = await SharedEntity.toList(UserModel);
    const guild = this.client.guilds.resolve("1175868237464997928");

    // console.log(guild?.roles.cache.map(role => `${role.name} (${role.id})`));

    if (!guild) return;

    for (let [_, member] of guild.members.cache) {
      if (member.user.bot) continue;
      const isUser = users.some((user) => user.payload.uid == member.id);

      if (!isUser) {
        const roles = guild.roles.cache.toJSON();
        console.log(roles.map((role) => `${role.name} (${role.id})`));
        member.roles.remove(roles);
      }
    }

    for (let user of users) {
      try {
        var member = await guild.members.fetch(user.payload.uid);
      } catch (error) {
        console.log(`Unknown Member: ${user.payload.username.discord}`);
        continue;
      }

      const memberRoles = member.roles.cache.map((role) => role.id);
      if (memberRoles.includes("1279880872887058544")) {
        const birthday = new Date(user.payload.about.birthday).getTime();
        const currentDate = new Date().getTime();

        const diff = currentDate - birthday;

        const seconds = 1000;
        const minutes = seconds * 60;
        const hours = minutes * 60;
        const days = hours * 24;
        const years = days * 365.25;

        const age = (diff / years) << 0;

        if (age < 18) {
          member.roles.remove("1279880872887058544");
          const nsfwWarningEmbed = new EmbedBuilder()
            .setColor("#E57373") // –ü—Ä–∏—è—Ç–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –∫—Ä–∞—Å–Ω–æ–≥–æ
            .setTitle("–í–Ω–∏–º–∞–Ω–∏–µ: –î–æ—Å—Ç—É–ø –∫ NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç—É")
            .setDescription(
              `${user.payload.about.name}, –º—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â—É—é –¥–æ—Å—Ç—É–ø –∫ NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.`
            )
            .addFields(
              {
                name: "–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                value:
                  "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–ª–∏—Ç–∏–∫–µ Discord, –¥–æ—Å—Ç—É–ø –∫ NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç—É —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç.",
              },
              {
                name: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞",
                value: `–¢–µ–±–µ –µ—â–µ **${formatDuration(
                  diff,
                  "ms",
                  1
                )}**, –∏ –º—ã –æ–±—è–∑–∞–Ω—ã —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ NSFW-–∫–æ–Ω—Ç–µ–Ω—Ç—É.`,
              },
              {
                name: "–ü—Ä–∏—á–∏–Ω–∞",
                value:
                  "–ú—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.",
              },
              {
                name: "–ü—Ä–æ—Å—å–±–∞",
                value:
                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–∞–∂–∞–π —ç—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø–æ–¥–æ–∂–¥–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.",
              },
              {
                name: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
                value:
                  "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.",
              }
            )
            .setFooter({
              text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
            });
          member.send({ embeds: [nsfwWarningEmbed] });
        }
      }

      if (user.payload.request.status == "approved") {
        member.roles.remove("1277332798025371648");
        member.roles.add("1277332882934726770");
      } else {
        member.roles.add("1277332798025371648");
        member.roles.remove("1277332882934726770");
      }

      const roles = member.roles.cache
        .toJSON()
        .filter((role) => role.name != "@everyone")
        .map((role) => role.id);

      user.save();
    }
  }

  async update(api: MinecraftAPI) {
    const list = await SharedEntity.toList(UserModel);

    const [response, widget] = await Promise.all([
      api.getInfo(),
      api.getWidget(),
    ]);

    const embed = new EmbedBuilder();
    if (!response.online) {
      embed
        .setTitle(`–°–µ—Ä–≤–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏`)
        .setDescription(
          `\`\`\`IP: ${response.host}\`\`\`\n**–ü—Ä–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è**`
        )
        .setColor(0xeb1049)
        .setImage("attachment://widget.png");
    } else {
      embed
        .setTitle(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: FoxMine`)
        .setDescription(`\`\`\`IP: ${response.host}\`\`\``)
        .setColor(0xb400ff)
        .addFields([
          {
            name: "–°—Ç–∞—Ç—É—Å",
            value: response.online ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω",
            inline: true,
          },
          {
            name: "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ EULA",
            value: response.eula_blocked ? "–î–∞" : "–ù–µ—Ç",
            inline: true,
          },
          {
            name: "–í–µ—Ä—Å–∏—è",
            value: response.version.name_clean,
            inline: true,
          },
          {
            name: `–ò–≥—Ä–æ–∫–∏ [${response.players.online} / ${response.players.max}]`,
            value: `\`\`\`${
              response.players.list
                .map(
                  (player) =>
                    `${player.name_clean} - ${
                      list.find(
                        (user) =>
                          user.payload.username.minecraft == player.name_clean
                      )?.payload.username.discord ?? "Discord –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    }`
                )
                .join("\n") || "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            }\`\`\``,
            inline: true,
          },
          {
            name: "–ú–æ–¥—ã",
            value: `\`\`\`${
              response.mods
                .map((m, index) => `${index + 1}. ${m}`)
                .join("\n") || "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            }\`\`\``,
            inline: true,
          },
          {
            name: "–ü–ª–∞–≥–∏–Ω—ã",
            value: `\`\`\`${
              response.plugins
                .map((p, index) => `${index + 1}. ${p}`)
                .join("\n") || "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            }\`\`\``,
            inline: true,
          },
        ])
        .setImage("attachment://widget.png");
    }

    const guilds = this.client.guilds.cache.toJSON();
    const guild = guilds[0];

    const channel = (await guild.channels.fetch(
      "1175870575571390614"
    )) as TextChannel;
    const message = await channel.messages.fetch("1190562700502257747");

    message.edit({
      embeds: [embed],
      files: [new AttachmentBuilder(widget, { name: "widget.png" })],
    });

    setTimeout(this.update.bind(this, api), 30 * 1000);
  }
}
