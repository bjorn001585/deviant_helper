import { EmbedBuilder, Message, PermissionResolvable } from "discord.js";

import { AlisterHelper } from "../core";
import BaseEntity, {
  CommandEntity,
  EntityManager,
  PrefixEntity,
} from "../engine/command-parser/manager";
import { Enum, Metadata } from "../engine/command-parser/enum";
import { TokenType } from "../engine/command-parser/token-type";
import { smartJoinAdvanced } from "../util/smartJoinAdvanced";

interface BaseArgument {
  name: string;
  description: string;
  type: TokenType<Metadata>;
  rest?: boolean;
}

interface RequiredArgument extends BaseArgument {
  required: true;
  default?: null;
}

interface NotRequiredArgument extends BaseArgument {
  required: false;
  default: BaseEntity;
}

interface BaseFlag {
  type: TokenType<Metadata>[];
  name: string;
  desription: string;
  allowList: boolean;
}

interface RequiredFlag extends BaseFlag {
  required: true;
  default?: null;
}

interface NotRequiredFlag extends BaseFlag {
  required: false;
  default: BaseEntity;
}

interface CommandOption {
  name: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  description: string;
  examples?: string[];
  memberPermissions: PermissionResolvable[]; // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  clientPermissions: PermissionResolvable[]; // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  memberAccess?: string[];
  errorMessages?: string[];
  arguments: (RequiredArgument | NotRequiredArgument)[];
  flags: (RequiredFlag | NotRequiredFlag)[];
}

export default class Command {
  constructor(public client: AlisterHelper, public option: CommandOption) {}

  public memberAccess(message: Message) {
    return !!(
      this.option.memberAccess &&
      !this.option.memberAccess.includes(message.author.id)
    );
  }

  public execute(
    message: Message,
    parser: {
      prefix: PrefixEntity;
      command: CommandEntity;
      manager: EntityManager<Enum<string, Metadata>>;
      flags: Record<string, BaseEntity>;
    }
  ) {
    if (!message.member?.permissions.has(this.option.memberPermissions)) {
      message.channel.send({ content: "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤" });

      return;
    }

    if (this.memberAccess(message)) {
      return;
    }

    const types = {
      [TokenType.STRING.value]: "—Å—Ç—Ä–æ–∫–∞",
      [TokenType.INT.value]: "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
      [TokenType.FLOAT.value]: "—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π",
      [TokenType.BOOLEAN.value]: "–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
      [TokenType.USER.value]: "@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      [TokenType.ROLE.value]: "@—Ä–æ–ª—å",
      [TokenType.CHANNEL.value]: "#–∫–∞–Ω–∞–ª",
      [TokenType.TIME.value]: "–≤—Ä–µ–º—è",
      [TokenType.HEX.value]: "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (0xHEX)",
    };

    const args = this.option.arguments;
    const restArgumentLength = args.filter(
      (arg) => arg.rest != undefined
    ).length;
    const firgsRequired = [...args]
      .sort((a, b) => Number(b.required) - Number(a.required))
      .map((arg) => arg.required);

    for (const arg of args) {
      const index = args.indexOf(arg);

      const argType = arg.type;
      let entity = parser.manager.entityes[index];

      if (arg.required != firgsRequired[index]) {
        const embed = new EmbedBuilder()
          .setColor("#FF5555") // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç embed
          .setTitle("üö® –û—à–∏–±–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤") // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
          .setDescription(
            "–ù–∞—Ä—É—à–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–µ, –∑–∞ –Ω–∏–º–∏ —Å–ª–µ–¥—É—é—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã –¥–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
          ) // –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
          .setFooter({
            text: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          }) // –§—É—Ç–µ—Ä —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
          .setTimestamp(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        return message.channel.send({ embeds: [embed] });
      }

      if (
        arg.required == true &&
        entity == undefined &&
        arg.default == undefined
      ) {
        const examples = this.option.examples
          ?.map((exp, index) => `${index + 1}. ${exp}`)
          .join("\n\n")
          .replace(/\{prefix\}/g, parser.prefix.value)
          .replace(/\{command\}/g, parser.command.value);
        const embed = new EmbedBuilder()
          .setColor("#FF5555")
          .setTitle("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä")
          .setDescription(
            `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä "${
              arg.name
            }" –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.\n\n**–ü—Ä–∏–º–µ—Ä—ã:**\n\`\`\`${
              examples || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            }\`\`\``
          )
          .setFooter({
            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã.",
          })
          .setTimestamp();

        return message.channel.send({ embeds: [embed] });
      } else {
        if (arg.default && entity?.value == undefined) {
          entity = arg.default;
        }
      }

      const entityType = entity.type;

      if (
        (arg.rest != undefined && index < args.length - 1) ||
        restArgumentLength > 1
      ) {
        const embed = new EmbedBuilder()
          .setColor("#FF5555") // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç embed
          .setTitle("üö® –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è rest –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞") // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
          .setDescription(
            "**Rest** –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ —Å–ø–∏—Å–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. **Rest** –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."
          ) // –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
          .setFooter({
            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          }) // –§—É—Ç–µ—Ä —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
          .setTimestamp();

        return message.channel.send({ embeds: [embed] });
      }

      if (argType != entityType) {
        const examples = this.option.examples
          ?.map((exp, index) => `${index + 1}. ${exp}`)
          .join("\n\n")
          .replace(/\{prefix\}/g, parser.prefix.value)
          .replace(/\{command\}/g, parser.command.value);
        const embed = new EmbedBuilder()
          .setColor("#FF5555")
          .setTitle("üö´ –û—à–∏–±–∫–∞ —Ç–∏–ø–∞")
          .setDescription(
            `–ü–∞—Ä–∞–º–µ—Ç—Ä "**${arg.name}**" –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø "**${
              types[argType.value]
            }**", –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ "**${
              types[entityType.value]
            }**".\n\n**–ü—Ä–∏–º–µ—Ä—ã:**\n\`\`\`${examples || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\`\`\``
          )
          .setFooter({ text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤." })
          .setFields(
            args.map((arg) => {
              return {
                name: `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞: ${arg.name}`,
                value: `–¢–∏–ø: **${types[arg.type.value]}**\n–°–ø–∏—Å–æ–∫: **${
                  arg.rest ? "–î–∞" : "–ù–µ—Ç"
                }**\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: **${arg.required ? "–î–∞" : "–ù–µ—Ç"}**\n\`\`\`${
                  arg.description
                }\`\`\``,
                inline: true,
              };
            })
          )
          .setTimestamp();

        return message.channel.send({ embeds: [embed] });
      }

      if (arg.rest == true) {
        const entityes = parser.manager.entityes.slice(index);
        // const has = args.slice(index).every(arg => entityes.every(entity => entity.type == arg.type))
        for (const entity of entityes) {
          if (argType != entity.type) {
            const examples = this.option.examples
              ?.map((exp, index) => `${index + 1}. ${exp}`)
              .join("\n\n")
              .replace(/\{prefix\}/g, parser.prefix.value)
              .replace(/\{command\}/g, parser.command.value);
            const embed = new EmbedBuilder()
              .setColor("#FF5555")
              .setTitle("üö´ –û—à–∏–±–∫–∞ —Ç–∏–ø–∞")
              .setDescription(
                `–ü–∞—Ä–∞–º–µ—Ç—Ä "**${
                  arg.name
                }**" —Å –≤–∫–ª—é—á–µ–Ω—ã–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º rest (—Å–ø–∏—Å–æ–∫) –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø "**${
                  types[argType.value]
                }**", –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ "**${
                  types[entity.type.value]
                }**".\n\n**–ü—Ä–∏–º–µ—Ä—ã:**\n\`\`\`${examples || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\`\`\``
              )
              .setFooter({ text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤." })
              .setFields(
                args.map((arg) => {
                  return {
                    name: `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä–≥—É–º–µ–Ω—Ç–∞: ${arg.name}`,
                    value: `–¢–∏–ø: **${types[arg.type.value]}**\n–°–ø–∏—Å–æ–∫: **${
                      arg.rest ? "–î–∞" : "–ù–µ—Ç"
                    }**\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: **${
                      arg.required ? "–î–∞" : "–ù–µ—Ç"
                    }**\n\`\`\`${arg.description}\`\`\``,
                    inline: true,
                  };
                })
              )
              .setTimestamp();

            return message.channel.send({ embeds: [embed] });
          }
        }
      }
    }

    const flags = this.option.flags;
    for (const flag of flags) {
      if (
        flag.required &&
        parser.flags[flag.name] == undefined &&
        flag.default == undefined
      ) {
        if (!(flag.name in parser.flags)) {
          const embed = new EmbedBuilder()
            .setColor("#FF5555")
            .setTitle("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–ª–∞–≥")
            .setDescription(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥ "**-${flag.name}**" –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω.`)
            .setFooter({
              text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã.",
            })
            .setTimestamp();

          return message.channel.send({ embeds: [embed] });
        }
      } else {
        if (flag.default != undefined && parser.flags[flag.name] == undefined) {
          parser.flags[flag.name] = flag.default;
        }
      }

      if (parser.flags[flag.name].isList()) {
        if (!flag.allowList) {
          const embed = new EmbedBuilder()
            .setTitle("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            .setColor("#FF5555")
            .setDescription(
              `–§–ª–∞–≥ "**-${flag.name}**" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.`
            )
            .setFooter({
              text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            })
            .setTimestamp();

          return message.channel.send({ embeds: [embed] });
        }

        const hasType = parser.flags[flag.name].elements.every((element) =>
          flag.type.some((t) => t == element.type)
        );
        if (!hasType) {
          const flagList = flags.map((flag) => {
            return {
              name: `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–ª–∞–≥–∞: -${flag.name}`,
              value: [
                `–¢–∏–ø—ã (–°–ø–∏—Å–æ–∫): ${smartJoinAdvanced(
                  flag.type.map((type) => `**${types[type.value]}**`)
                )}`,
                `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: **${flag.required ? "–î–∞" : "–ù–µ—Ç"}**`,
                `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–∏—Å–∫–∞: **${flag.allowList ? "–î–∞" : "–ù–µ—Ç"}**`,
                `\`\`\`${
                  flag.desription.length < 1
                    ? "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    : flag.desription
                }\`\`\``,
              ].join("\n"),
              inline: true,
            };
          });

          const excludeTypes = parser.flags[flag.name].elements.filter(
            (element) => !flag.type.some((type) => element.type == type)
          );

          const embed = new EmbedBuilder()
            .setColor("#FF5555")
            .setTitle("üö´ –û—à–∏–±–∫–∞ —Ç–∏–ø–∞")
            .setDescription(
              `–§–ª–∞–≥ "**-${
                flag.name
              }**" –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã ${smartJoinAdvanced(
                flag.type.map((type) => `"**${types[type.value]}**"`)
              )}, –Ω–æ –ø–æ–ª—É—á–µ–Ω ${smartJoinAdvanced(
                excludeTypes.map((token) => `"**${types[token.type.value]}**"`)
              )}`
            )
            .setFields(flagList);

          return message.channel.send({ embeds: [embed] });
        }
      } else {
        if (flag.allowList && parser.flags[flag.name].isList()) {
          const embed = new EmbedBuilder()
            .setTitle("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            .setColor("#FF5555")
            .setDescription(
              `–§–ª–∞–≥ "**-${flag.name}**" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.`
            )
            .setFooter({
              text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            })
            .setTimestamp();

          return message.channel.send({ embeds: [embed] });
        }

        const hasType = flag.type.some(
          (type) => type == parser.flags[flag.name].type
        );
        if (!hasType) {
          const flagList = flags.map((flag) => {
            return {
              name: `–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–ª–∞–≥–∞: -${flag.name}`,
              value: [
                `–¢–∏–ø—ã: ${smartJoinAdvanced(
                  flag.type.map((type) => `**${types[type.value]}**`)
                )}`,
                `–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: **${flag.required ? "–î–∞" : "–ù–µ—Ç"}**`,
                `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ø–∏—Å–∫–∞: **${flag.allowList ? "–î–∞" : "–ù–µ—Ç"}**`,
                `\`\`\`${
                  flag.desription.length < 1
                    ? "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    : flag.desription
                }\`\`\``,
              ].join("\n"),
              inline: true,
            };
          });

          const embed = new EmbedBuilder()
            .setColor("#FF5555")
            .setTitle("üö´ –û—à–∏–±–∫–∞ —Ç–∏–ø–∞")
            .setDescription(
              `–§–ª–∞–≥ "**-${
                flag.name
              }**" –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã ${smartJoinAdvanced(
                flag.type.map((type) => `"**${types[type.value]}**"`)
              )}, –Ω–æ –ø–æ–ª—É—á–µ–Ω "**${types[parser.flags[flag.name].type.value]}**"`
            )
            .setFields(flagList);

          return message.channel.send({ embeds: [embed] });
        }
      }
    }

    this.run(message, parser.manager, parser.flags);
  }

  run(
    message: Message,
    manager: EntityManager<Enum<string, Metadata>>,
    flags: Record<string, BaseEntity>
  ) {
    throw new Error("Command not implemented");
  }
}
